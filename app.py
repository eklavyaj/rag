from rag import (
    get_database,
    get_service_context,
    get_query_engine,
    get_response,
    delete_database
)

import pandas as pd
# from llama_index import set_global_handler
# import wandb
# import llama_index
import sqlite3
import os
from dotenv import load_dotenv
import streamlit as st
import datetime
import plotly.express as px

load_dotenv()

BASE_DIR = os.getenv("BASE_DIR")
CACHE_DIR = os.getenv("CACHE_DIR")
TOKEN = os.getenv("HF_TOKEN")
MISTRAL_7B_INSTRUCT = os.getenv("MISTRAL_7B_INSTRUCT")
DB_URL = os.getenv("DB_URL")
EXPERIMENT_LOGGER = os.getenv("EXPERIMENT_LOGGER")
EXCEL_FILE = os.getenv("EXCEL_FILE")
CSV_FOLDER = os.getenv("CSV_FOLDER")
ASSET_MAPPING_PATH = os.getenv("ASSET_MAPPING_PATH")


PORTFOLIOS = [
    "low risk",
    "moderate risk",
    "medium risk",
    "high risk",
]

# portfolio = PORTFOLIOS[0]

def create_path(path_):
    if not os.path.exists(path_.rsplit('/', 1)[0]):
        os.makedirs(path_.rsplit('/', 1)[0])
    return 

def answer_query(query_engine, query):
    
    time, resp, sql = get_response(
        query_engine=query_engine, query_str=query, print_=False
    )
    return time, resp, sql


create_path(EXPERIMENT_LOGGER)
create_path(CSV_FOLDER)
create_path(DB_URL)
create_path(CACHE_DIR)

# delete_database(DB_URL)

# set_global_handler("wandb", run_args={"project": "llama-index"})
# wandb_callback = llama_index.global_handler

page =  st.sidebar.radio("Choose Page", ['LLM Chatbot', 'Analytics/History'])

st.header("FinAdvisor")

if page == 'LLM Chatbot':
    
    portfolio = st.selectbox("Choose Portfolio", PORTFOLIOS)
    with st.spinner("Accessing Database"):
        
        sql_database = get_database(DB_URL,
                                    excel_file=EXCEL_FILE,
                                    portfolio=portfolio, 
                                    csv_folder=CSV_FOLDER, 
                                    csv_path=ASSET_MAPPING_PATH)

        service_context_mistral = get_service_context(
            MISTRAL_7B_INSTRUCT, token=TOKEN, cache_dir=CACHE_DIR
        )
        
        query_engine = get_query_engine(
            sql_database=sql_database, service_context=service_context_mistral
        )

    input_query = st.text_area(
        "Enter Query", 
        "What is the number of shares bought for Google in the user portfolio?"
    )

    if input_query:
        with st.spinner("Calculating Response"):
            time, resp, sql = answer_query(query_engine=query_engine, query=input_query)

        st.write(f"Time Taken: {time} seconds")

        st.write("LLM Response:")
        st.code(f"{resp}", language='markdown')

        st.write("SQL generated by LLM")
        st.code(f"{sql}", language='sql')
        
        conn = sqlite3.connect(DB_URL)
        df_sql = pd.read_sql(sql, con=conn)
        
        st.write("SQL Output")
        st.dataframe(df_sql, hide_index=True)
        
        df = pd.DataFrame({
            'timestamp': [datetime.datetime.now()],
            'user_input': [input_query],
            'llm_response': [resp],
            'time_taken': [time],
            'sql_query': [sql],
            'portfolio': [portfolio], 
            })
        
        try:
            results = pd.read_csv(EXPERIMENT_LOGGER)
            results = pd.concat([results, df], axis=0, ignore_index=True)
            results = results.drop_duplicates(subset=['user_input'])
            results.to_csv(EXPERIMENT_LOGGER, index=False)
            
        except:
            df.to_csv(EXPERIMENT_LOGGER, index=False)


elif page == 'Analytics/History':
    
    try:
        df = pd.read_csv(EXPERIMENT_LOGGER)
        
        st.data_editor(df, hide_index=True)
        
        df['response_length'] = df['llm_response'].apply(lambda x: len(x))
        
        fig = px.histogram(df, x='time_taken')
        fig.update_xaxes(title='Time Taken (s)')
        st.plotly_chart(fig, use_container_width=True)
        
        fig = px.histogram(df, x='response_length')
        fig.update_xaxes(title='Response Length')
        st.plotly_chart(fig, use_container_width=True)
    except:
        st.write("No History Found")